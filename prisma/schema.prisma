generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ======================================
/// 사용자 관리 테이블
/// 사용 페이지: /auth/login, /auth/signup, /profile, 모든 페이지 (세션)
/// 목적: 사용자 인증, 프로필 관리, 세션 유지
/// ======================================
model User {
  /// 고유 ID (CUID 형식) - 자동 생성
  id              String            @id @default(cuid())
  
  /// 사용자 실명 - OAuth 로그인 시 자동 입력 (Google/GitHub에서 가져옴)
  name            String?
  
  /// 이메일 주소 - 로그인 ID로 사용, 중복 불가
  email           String?           @unique
  
  /// 이메일 인증 완료 시간 - NextAuth 자동 관리
  emailVerified   DateTime?
  
  /// 프로필 이미지 URL - OAuth에서 가져오거나 사용자 업로드
  image           String?
  
  /// 계정 생성 시간
  createdAt       DateTime          @default(now())
  
  /// 마지막 정보 수정 시간
  updatedAt       DateTime          @updatedAt
  
  /// 닉네임 - 프로필 설정(/profile/edit)에서 설정, UI 전체에서 표시용
  nickname        String?           @unique
  
  /// 아바타 설정 JSON - /profile/avatar에서 커스터마이징
  avatar          String?
  
  /// 자기소개 - /profile/edit에서 작성
  bio             String?
  
  /// 프로필 완성 여부 - 닉네임, 아바타 설정 시 true
  isCompleted     Boolean           @default(false)
  
  // Relations
  accounts        Account[]
  chatMessages    ChatMessage[]
  InterviewAnswer InterviewAnswer[]
  projects        ProjectMember[]
  RecommendedRole RecommendedRole[]
  sessions        Session[]
}

/// ======================================
/// OAuth 계정 연동 테이블 (NextAuth 필수)
/// 사용: NextAuth 내부에서 자동 관리
/// 목적: Google, GitHub 등 OAuth 제공자 연동 정보 저장
/// ======================================
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  
  /// OAuth 타입 (보통 "oauth")
  type                     String
  
  /// OAuth 제공자명 (google, github 등)
  provider                 String
  
  /// OAuth 제공자에서 부여한 사용자 ID
  providerAccountId        String
  
  /// 갱신 토큰 - API 호출용
  refresh_token            String?
  
  /// 액세스 토큰 - API 호출용
  access_token             String?
  
  /// 토큰 만료 시간 (Unix timestamp)
  expires_at               Int?
  
  /// 토큰 타입 (보통 "Bearer")
  token_type               String?
  
  /// OAuth 권한 범위
  scope                    String?
  
  /// ID 토큰 (OpenID Connect)
  id_token                 String?
  
  /// OAuth 세션 상태
  session_state            String?
  
  /// 리프레시 토큰 만료 시간
  refresh_token_expires_in Int?
  
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// ======================================
/// 세션 관리 테이블 (NextAuth 필수)
/// 사용: NextAuth 내부에서 자동 관리
/// 목적: 로그인 세션 유지, 자동 로그아웃 관리
/// ======================================
model Session {
  id           String   @id @default(cuid())
  
  /// 세션 토큰 - 쿠키에 저장되는 값
  sessionToken String   @unique
  
  /// 세션 소유자
  userId       String
  
  /// 세션 만료 시간
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// ======================================
/// 프로젝트 테이블
/// 사용 페이지: /projects, /projects/[id], /api/chat
/// 목적: 프로젝트 정보 저장, 팀 빌딩 진행 상태 관리
/// ======================================
model Project {
  /// 프로젝트 고유 ID
  id              String            @id @default(cuid())
  
  /// 프로젝트명 - AI 상담(/api/chat)에서 생성
  name            String
  
  /// 프로젝트 설명 - AI 상담에서 생성
  description     String
  
  /// 생성 시간
  createdAt       DateTime          @default(now())
  
  /// 수정 시간
  updatedAt       DateTime          @updatedAt
  
  /// 프로젝트 진행 상태 - RECRUITING(모집중) → INTERVIEWING(면담중) → ANALYZING(분석중) → ACTIVE(진행중)
  status          ProjectStatus     @default(RECRUITING)
  
  /// 초대 코드 - /projects/[id]에서 표시, 6자리로 변환해서 사용
  inviteCode      String            @unique @default(cuid())
  
  /// AI가 생성한 프로젝트 청사진 JSON - /api/chat에서 생성
  /// 구조: { overview, mainFeatures, techStackDetail, developmentPlan, teamComposition }
  blueprint       Json?
  
  /// AI 팀 분석 결과 JSON - /api/projects/[id]/analyze에서 생성
  /// 구조: { teamComposition, roleRecommendations, skillAnalysis }
  teamAnalysis    Json?
  
  /// 기술 스택 JSON - /api/chat에서 생성
  /// 구조: { frontend: { languages, frameworks }, backend: { ... }, collaboration: { git, tools } }
  techStack       Json
  
  /// 목표 팀 크기 - AI 상담에서 설정 (기본 4명)
  teamSize        Int               @default(4)
  
  // Relations
  chatMessages    ChatMessage[]
  InviteLink      InviteLink[]
  members         ProjectMember[]
  RecommendedRole RecommendedRole[]
  Role            Role[]
}

/// ======================================
/// 프로젝트 멤버 테이블
/// 사용 페이지: /projects/[id], /projects/[id]/interview, /projects/[id]/analysis
/// 목적: 프로젝트 참여자 관리, 면담 진행 상태, 역할 배정
/// ======================================
model ProjectMember {
  id               String          @id @default(cuid())
  projectId        String
  userId           String
  
  /// 참여 시간 - /api/projects/[id]/join에서 기록
  joinedAt         DateTime        @default(now())
  
  /// 배정된 역할 - /api/projects/[id]/analyze에서 AI가 결정
  role             String?
  
  /// 면담 프로필 JSON - /projects/[id]/interview에서 수집
  /// 구조: { skillScores: {JavaScript: 5, ...}, roleAptitudes: {backend: 0.8}, workStyles: ["협업선호"] }
  memberProfile    Json?
  
  /// 면담 진행 상태 - PENDING → IN_PROGRESS → COMPLETED
  interviewStatus  InterviewStatus @default(PENDING)
  
  /// 팀 분석 동의 여부 - /projects/[id]에서 체크박스로 동의
  agreedToAnalysis Boolean         @default(false)
  
  project          Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

/// ======================================
/// 채팅 메시지 테이블
/// 사용 페이지: /api/chat (AI 상담), /projects/[id]/chat (팀 채팅)
/// 목적: AI 상담 대화 기록, 프로젝트 팀 채팅 저장
/// ======================================
model ChatMessage {
  id        String      @id @default(cuid())
  
  /// 프로젝트 ID - null이면 AI 상담, 값이 있으면 팀 채팅
  projectId String
  
  /// 작성자 ID - SYSTEM/AI 메시지는 null
  userId    String?
  
  /// 메시지 내용
  content   String
  
  /// 메시지 타입 - USER(사용자), SYSTEM(시스템 알림), AI(AI 응답)
  type      MessageType @default(USER)
  
  createdAt DateTime    @default(now())
  
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// ======================================
/// 면담 답변 테이블 (현재 미사용)
/// 원래 목적: 구조화된 면담 질문-답변 저장
/// 현재: ProjectMember.memberProfile JSON으로 대체
/// ======================================
model InterviewAnswer {
  id                String            @id
  userId            String
  questionId        String
  answer            String
  createdAt         DateTime          @default(now())
  InterviewQuestion InterviewQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  User              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
}

/// ======================================
/// 면담 질문 테이블 (현재 미사용)
/// 원래 목적: 고정된 면담 질문 목록
/// 현재: AI 동적 생성으로 대체
/// ======================================
model InterviewQuestion {
  id              String            @id
  question        String
  order           Int
  InterviewAnswer InterviewAnswer[]
}

/// ======================================
/// 초대 링크 테이블 (현재 미사용)
/// 원래 목적: 시간 제한 초대 링크
/// 현재: Project.inviteCode로 대체
/// ======================================
model InviteLink {
  id        String   @id
  projectId String
  code      String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

/// ======================================
/// 추천 역할 테이블 (현재 미사용)
/// 원래 목적: AI가 추천한 역할 저장
/// 현재: Project.teamAnalysis JSON으로 대체
/// ======================================
model RecommendedRole {
  id        String   @id
  projectId String
  userId    String
  roleId    String
  reason    String?
  createdAt DateTime @default(now())
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

/// ======================================
/// 역할 정의 테이블 (현재 미사용)
/// 원래 목적: 프로젝트별 역할 정의
/// 현재: 하드코딩된 역할 사용 (백엔드, 프론트엔드, 풀스택, 팀장)
/// ======================================
model Role {
  id              String            @id
  projectId       String
  name            String
  description     String?
  RecommendedRole RecommendedRole[]
  Project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

/// ======================================
/// 프로젝트 상태 ENUM
/// ======================================
enum ProjectStatus {
  /// 팀원 모집 중 - /projects/[id] 초대 코드 표시
  RECRUITING
  
  /// 개별 면담 진행 중 - /projects/[id]/interview
  INTERVIEWING
  
  /// AI 팀 분석 중 - /api/projects/[id]/analyze
  ANALYZING
  
  /// 프로젝트 진행 중 - /projects/[id]/chat 활성화
  ACTIVE
  
  /// 프로젝트 완료
  COMPLETED
  
  /// 일시 중지
  PAUSED
}

/// ======================================
/// 면담 상태 ENUM
/// ======================================
enum InterviewStatus {
  /// 면담 대기 - 아직 시작 안 함
  PENDING
  
  /// 면담 진행 중 - /projects/[id]/interview 접속함
  IN_PROGRESS
  
  /// 면담 완료 - memberProfile 저장 완료
  COMPLETED
}

/// ======================================
/// 메시지 타입 ENUM
/// ======================================
enum MessageType {
  /// 사용자 메시지
  USER
  
  /// 시스템 알림 (입장, 퇴장 등)
  SYSTEM
  
  /// AI 응답
  AI
}

/// ======================================
/// 면담 단계 ENUM (현재 미사용)
/// InterviewStatus와 중복되어 사용 안 함
/// ======================================
enum InterviewPhase {
  PENDING
  IN_PROGRESS
  COMPLETED
}