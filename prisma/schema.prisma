// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  sessions         Session[]
  projects         ProjectMember[]
  interviewAnswers InterviewAnswer[]
  chatMessages     ChatMessage[]
  ownedProjects    Project[]         @relation("ProjectOwner")
  recommendedRoles RecommendedRole[]
}

model Account {
  id                        String    @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?   @db.Text
  access_token              String?   @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?   @db.Text
  session_state             String?
  refresh_token_expires_in  Int?      // <-- 이 줄을 추가합니다.

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProjectStatus {
  RECRUITING // 팀원 모집 중
  INTERVIEWING // 개별 면담 진행 중
  ANALYZING // AI 분석 중
  ACTIVE // 프로젝트 진행 중
  COMPLETED // 프로젝트 완료
  PAUSED // 일시 정지
}

enum InterviewPhase {
  PENDING // 면담 대기
  IN_PROGRESS // 면담 진행 중
  COMPLETED // 면담 완료
}

enum InterviewStatus {
  PENDING // 면담 대기
  IN_PROGRESS // 면담 진행 중
  COMPLETED // 면담 완료
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  goal        String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])

  // 프로젝트 상태 및 설정
  status            ProjectStatus @default(RECRUITING)
  progress          Int           @default(0)
  maxMembers        Int           @default(4)
  inviteCode        String        @unique @default(cuid())
  interviewPhase    InterviewPhase @default(PENDING)
  
  // AI 관련 데이터 (확장됨)
  consultationData  Json?         // 기존 상담 데이터
  blueprint         Json?         // ProjectBlueprint 저장
  teamAnalysis      Json?         // TeamAnalysis 저장
  techStack         String[]
  aiAnalysis        Json?

  // 관계
  members          ProjectMember[]
  roles            Role[]
  inviteLinks      InviteLink[]
  chatMessages     ChatMessage[]
  recommendedRoles RecommendedRole[]
}

model Role {
  id               String            @id @default(cuid())
  projectId        String
  name             String
  description      String?           @db.Text
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  recommendedRoles RecommendedRole[]
}

model ProjectMember {
  id                     String   @id @default(cuid())
  projectId              String
  userId                 String
  joinedAt               DateTime @default(now())
  
  // 팀원 상태 정보 (확장됨)
  consultationCompleted  Boolean         @default(false)
  isActive              Boolean         @default(true)
  role                  String?
  consultationData      Json?           // 기존 상담 데이터
  memberProfile         Json?           // MemberProfile 저장
  interviewStatus       InterviewStatus @default(PENDING)
  roleAssignment        Json?           // RoleAssignment 저장
  
  // 관계
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model InviteLink {
  id        String   @id @default(cuid())
  projectId String
  code      String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model InterviewQuestion {
  id       String            @id @default(cuid())
  question String            @db.Text
  order    Int
  answers  InterviewAnswer[]
}

model InterviewAnswer {
  id         String            @id @default(cuid())
  userId     String
  questionId String
  answer     String            @db.Text
  createdAt  DateTime          @default(now())
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   InterviewQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
}

model RecommendedRole {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  roleId    String
  reason    String?  @db.Text
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

enum MessageType {
  USER
  SYSTEM
  AI
}

model ChatMessage {
  id        String      @id @default(cuid())
  projectId String
  userId    String?     // nullable for system messages
  content   String      @db.Text
  type      MessageType @default(USER)
  createdAt DateTime    @default(now())
  
  // 관계
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}
