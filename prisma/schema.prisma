// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  sessions         Session[]
  projects         ProjectMember[]
  interviewAnswers InterviewAnswer[]
  chatMessages     ChatMessage[]
  ownedProjects    Project[]         @relation("ProjectOwner")
  recommendedRoles RecommendedRole[]
}

model Account {
  id                        String    @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?   @db.Text
  access_token              String?   @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?   @db.Text
  session_state             String?
  refresh_token_expires_in  Int?      // <-- 이 줄을 추가합니다.

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id               String            @id @default(cuid())
  name             String
  goal             String            @db.Text
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  ownerId          String
  owner            User              @relation("ProjectOwner", fields: [ownerId], references: [id])
  members          ProjectMember[]
  roles            Role[]
  inviteLinks      InviteLink[]
  chatMessages     ChatMessage[]
  recommendedRoles RecommendedRole[]
  status           ProjectStatus     @default(INITIAL_CONSULTATION) // 새로운 status 필드
  consultationData Json?             // 새로운 consultationData 필드
}

enum ProjectStatus {
  INITIAL_CONSULTATION // 초기 AI 상담 중
  INVITING_MEMBERS     // 팀원 초대 중
  MEMBER_INTERVIEWING  // 팀원 AI 인터뷰 중
  FINAL_CONFIRMATION   // 최종 확정 대기 중
  ACTIVE               // 프로젝트 활성화 (최종 생성 완료)
  COMPLETED            // 프로젝트 완료
  ARCHIVED             // 프로젝트 보관
}

model Role {
  id               String            @id @default(cuid())
  projectId        String
  name             String
  description      String?           @db.Text
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  recommendedRoles RecommendedRole[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model InviteLink {
  id        String   @id @default(cuid())
  projectId String
  code      String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model InterviewQuestion {
  id       String            @id @default(cuid())
  question String            @db.Text
  order    Int
  answers  InterviewAnswer[]
}

model InterviewAnswer {
  id         String            @id @default(cuid())
  userId     String
  questionId String
  answer     String            @db.Text
  createdAt  DateTime          @default(now())
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   InterviewQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
}

model RecommendedRole {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  roleId    String
  reason    String?  @db.Text
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
