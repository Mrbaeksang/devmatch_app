generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  nickname         String?           @unique
  avatar           String?
  bio              String?
  isCompleted      Boolean           @default(false)
  accounts         Account[]
  chatMessages     ChatMessage[]
  interviewAnswers InterviewAnswer[]
  projects         ProjectMember[]
  recommendedRoles RecommendedRole[]
  sessions         Session[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id               String            @id @default(cuid())
  name             String
  description      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  status           ProjectStatus     @default(RECRUITING)
  inviteCode       String            @unique @default(cuid())
  blueprint        Json?
  teamAnalysis     Json?
  techStack        Json
  teamSize         Int               @default(4)
  chatMessages     ChatMessage[]
  inviteLinks      InviteLink[]
  members          ProjectMember[]
  recommendedRoles RecommendedRole[]
  roles            Role[]
}

model Role {
  id               String            @id @default(cuid())
  projectId        String
  name             String
  description      String?
  recommendedRoles RecommendedRole[]
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectMember {
  id              String          @id @default(cuid())
  projectId       String
  userId          String
  joinedAt        DateTime        @default(now())
  role            String?
  memberProfile   Json?
  interviewStatus InterviewStatus @default(PENDING)
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model InviteLink {
  id        String   @id @default(cuid())
  projectId String
  code      String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model InterviewQuestion {
  id       String            @id @default(cuid())
  question String
  order    Int
  answers  InterviewAnswer[]
}

model InterviewAnswer {
  id         String            @id @default(cuid())
  userId     String
  questionId String
  answer     String
  createdAt  DateTime          @default(now())
  question   InterviewQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
}

model RecommendedRole {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  roleId    String
  reason    String?
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model ChatMessage {
  id        String      @id @default(cuid())
  projectId String
  userId    String?
  content   String
  type      MessageType @default(USER)
  createdAt DateTime    @default(now())
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProjectStatus {
  RECRUITING
  INTERVIEWING
  ANALYZING
  ACTIVE
  COMPLETED
  PAUSED
}

enum InterviewPhase {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum InterviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum MessageType {
  USER
  SYSTEM
  AI
}
